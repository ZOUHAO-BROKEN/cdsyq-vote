<style type="less">
page{
  height: 100%;
}

.background{
  width: 100%;
  height: 100%;
  z-index: -1;
  position:absolute;
  left:0px;
  top:0px;
  z-index:-1
}

.voteEn{
  height: 85%;
  display: flex;
  flex-direction: row;
  justify-content: space-aroundx;
  align-items: flex-end;
}
</style>
<template>
<img class="background" mode="aspectFill" src="{{bgurl}}"/>
<view class="voteEn">

<img  style="height:40px;" mode="aspectFit" src="{{teamVoteBtn}}" animation="{{teamAnimateData}}" @tap="teamVoteTap"/>
<img  style="height:40px;" mode="aspectFit" src="{{indivVoteBtn}}" @tap="indivVoteTap"/>
</view>


</template>

<script>
import wepy from '@wepy/core'

var zhtool = require('../common/zhtool.js')

wepy.page({
  data: {
    bgurl: 'https://ccbynt.cn/khxxurl/static/bg.jpg',
    teamVoteBtn: 'https://ccbynt.cn/khxxurl/static/button1.png',
    indivVoteBtn: 'https://ccbynt.cn/khxxurl/static/button2.png',
    //teamVoteBtn: 'https://ccbynt.cn/khxxurl/static/button-disable-1.jpg',
    //indivVoteBtn: 'https://ccbynt.cn/khxxurl/static/button-disable-2.jpg',
    isTeamVoteTime: false,
    isIndivVoteTime: false,
    animationData: {},
    teamAnimateData: '',
    indivAnimateData: '',
    teamIntervalId: '',
    indivIntervalId: '',
    teamAniInterId: '',
    indivAniInterId: '',
    userId: '',
    indivIntervalId: ''

  },
  methods:{
    teamVoteTap(){
      self = this;
      this.checkTeadVoteStat();
      if(this.isTeamVoteTime){
          console.log(self.userId);
          wx.navigateTo({
            url:"voteteam?userId="+self.userId
          });
      }else{
          wx.showModal({
            title: '提示',
            showCancel: false,
            content: '团队投票通道未开启，请稍等',
            success (res) {
              if (res.confirm) {
                console.log('用户点击确定')
              }
            }
          })
      }
      
    },
    indivVoteTap(){

      self = this;
      this.checkIndivVoteStat();

      if(this.isIndivVoteTime){
          wx.navigateTo({
            url:"voteplayer?userId="+self.userId
          });
      }else{
          wx.showModal({
            title: '提示',
            showCancel: false,
            content: '个人投票通道未开启，请稍等',
            success (res) {
              if (res.confirm) {
                console.log('用户点击确定')
              }
            }
          })
      }
      
    },
    checkTeadVoteStat(){

      self = this;

      let teamVoteStatUrl = 'https://ccbynt.cn/khxxurl/web/api/team/voteState';

      zhtool.httpsRequest(teamVoteStatUrl).then(res => {

          //vote start
          if(res.data.responseData.voteState == '1'){
            //self.teamVoteBtn = 'https://ccbynt.cn/khxxurl/static/button1.png';
            self.isTeamVoteTime = true;
            self.teamVoteAnimateStart();
            //clearInterval(this.teamIntervalId);

            //TODO 动画
          }else{
            //self.teamVoteBtn = 'https://ccbynt.cn/khxxurl/static/button-disable-1.jpg';
            self.isTeamVoteTime = false;
            self.teamVoteAnimateStop();
            console.log('teamVote not start!');
          }
        
      }).catch(res => {
          
      });
    },
    checkIndivVoteStat(){

      self = this;

      let indivVoteStatUrl = 'https://ccbynt.cn/khxxurl/web/api/player/voteState';

      zhtool.httpsRequest(indivVoteStatUrl).then(res => {

          console.log(res);
          //vote start
          if(res.data.responseData.voteState == '1'){
            //self.indivVoteBtn = 'https://ccbynt.cn/khxxurl/static/button2.png';
            self.isIndivVoteTime = true;
            
            //clearInterval(this.indivIntervalId);

            //TODO 动画
          }else{
            //self.indivVoteBtn = 'https://ccbynt.cn/khxxurl/static/button-disable-2.jpg';
            self.isIndivVoteTime = false;

            console.log('individual not start!');
          }
        
      }).catch(res => {
        
      });
    },
    teamVoteAnimateStart(){

        self = this;
        var animation = wx.createAnimation({
          duration: 1000,
          timingFunction: 'ease',
        })

        var next = true;

        this.teamAniInterId = setInterval(function () {
          if (next) {
            animation.scale(0.95,0.95).step()   
            next = !next;
          } else {
            animation.scale(1.05,1.05).step()
            next = !next;
          }

          self.teamAnimateData = animation.export();

        }, 500);

        //TOTEST
        //animation.scale(0.95,0.95).step();
        //self.teamAnimateData = animation.export();
        //

        console.log(this.teamAniInterId);

    },
    teamVoteAnimateStop(){
        clearInterval(this.teamAniInterId);
        //this.teamAnimateData = {};
    },
    indiviVoteAnimateStart(){
        self = this;
        var animation = wx.createAnimation({
          duration: 1000,
          timingFunction: 'ease',
        })

        var next = true;

        this.indivIntervalId = setInterval(function () {
          if (next) {
            animation.scale(0.95,0.95).step()   
            next = !next;
          } else {
            animation.scale(1.05,1.05).step()
            next = !next;
          }

          self.indivAnimateData = animation.export();

        }, 500);

    },
    indiviVoteAnimateStop(){
        clearInterval(this.indivIntervalId);
    }
      
  },
  created(){
    
  },

  onShow(){


    self = this;

    self.checkTeadVoteStat();
    self.checkIndivVoteStat();

    this.teamIntervalId = setInterval(function(){
      self.checkTeadVoteStat();
    }, 5000);
    //console.log(intervalId);

    /*setTimeout(function(){
        clearInterval(intervalId);
    }, 5000)*/

    this.indivIntervalId = setInterval(function(){
      self.checkIndivVoteStat()
    }, 5000);

    /*var animation = wx.createAnimation({
      duration: 1000,
      timingFunction: 'ease',
    })

    var next = true;

    setInterval(function () {
      if (next) {
        animation.scale(0.95,0.95).step()   
        next = !next;
      } else {
        animation.scale(1.05,1.05).step()
        next = !next;
      }

      this.animationData = animation.export();

    }.bind(this), 500)*/
  },
  onLoad(options){
    this.userId = options.userId;
  }
})
</script>